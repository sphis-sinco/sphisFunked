import funkin.play.character.MultiSparrowCharacter;
import funkin.play.PlayState;
import flixel.FlxG;
import flixel.FlxSprite;
import flixel.group.FlxTypedSpriteGroup;
import funkin.graphics.FunkinSprite;
import funkin.modding.base.ScriptedFlxAtlasSprite;
import funkin.modding.base.ScriptedFlxSprite;
import funkin.modding.base.ScriptedFlxSpriteGroup;
import funkin.graphics.adobeanimate.FlxAtlasSprite;
import funkin.audio.visualize.ABotVis;

class SphisGirlfriend extends MultiSparrowCharacter
{
  function new()
  {
    super('-sgf');
  }

  var speaker:FlxSprite;

  function onCreate(event:ScriptEvent)
  {
    super.onCreate(event);

    speaker = new FlxSprite(0, 0, Paths.image('characters/sgf/sgf-speaker'));
    var tex:FlxFramesCollection = Paths.getSparrowAtlas('characters/sgf/sgf-speaker');
    speaker.frames = tex;
    speaker.animation.addByPrefix('idle', 'sgf speaker v2 bump', 24, false);
  }

  var comboAnimationComboCounts = [
    50,
    100,
    200,
    250
  ];

  var min_comboDropAnim_comboAmount = 1;

  function playComboAnimation(comboCount:Int):Void
  {
    if (!comboAnimationComboCounts.contains(comboCount)) return;

    trace('Playing GF combo animation, combo='+comboCount);
    this.playAnimation("cheer", true, true);
  }

  function playComboDropAnimation(comboCount:Int):Void
  {
    if (min_comboDropAnim_comboAmount > comboCount) return;

    trace('Playing GF combo drop animation, combo='+comboCount);
    this.playAnimation("sad", true, true);
  }

  
  public function playAnimation(name:String, restart:Bool = false, ignoreOther:Bool = false, reversed:Bool = false):Void
  {
    super.playAnimation(name, restart, ignoreOther, reversed);

    if (name == 'idle')
    {
      if (speaker != null)
      {
        speaker.animation.play('idle');
      }
    }
  }

  var refershedLol:Bool = false;

  function onUpdate(event:UpdateScriptEvent)
  {
    super.onUpdate(event);

    synchronizeShader();

    speaker.visible = this.visible;

    // refreshes just for the zIndex shit!
    if (!refershedLol)
    {
      speaker.x = this.x + 0;
      speaker.y = this.y + 320;
      speaker.zIndex = this.zIndex + 1;
      PlayState.instance.currentStage.add(speaker);

      PlayState.instance.currentStage.refresh();
      refershedLol = true;
    }
  }

  var currentShader = null;
  function synchronizeShader():Void
  {
    if (currentShader == this.shader) return;

    currentShader = this.shader;

    speaker.shader = currentShader;

    trace("Synchronized shader between children!");
  }
}
